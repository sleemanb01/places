{"version":3,"file":"static/js/731.7c4b0fc1.chunk.js","mappings":"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","sources":["FC/places/pages/UpdatePlace.tsx","FC/shared/components/FormElements/Input.tsx","FC/shared/components/UIElements/Card.tsx","hooks/form-hook.tsx","util/validators.tsx","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","hooks/useReducer.tsx","typing/enums.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { AuthContext } from \"../../../hooks/auth-context\";\r\nimport { useForm } from \"../../../hooks/form-hook\";\r\nimport { useHttpClient } from \"../../../hooks/http-hook\";\r\nimport { reducerFormStateInitVal } from \"../../../hooks/useReducer\";\r\nimport { EValidatorType } from \"../../../typing/enums\";\r\nimport { IPlace } from \"../../../typing/interfaces\";\r\nimport { reducerInputState } from \"../../../typing/types\";\r\nimport {\r\n  DEFAULT_HEADERS,\r\n  ERROR_DESCRIPTION_LENGTH,\r\n  ERROR_TEXT_REQUIRED,\r\n  ENDPOINT_PLACES,\r\n} from \"../../../util/Constants\";\r\nimport { Button } from \"../../shared/components/FormElements/Button\";\r\nimport { Input } from \"../../shared/components/FormElements/Input\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport { ErrorModal } from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\n\r\nimport \"./PlaceForm.css\";\r\n\r\nfunction UpdatePlace() {\r\n  const user = useContext(AuthContext).user;\r\n  const placeId = useParams().placeId;\r\n  const nav = useNavigate();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [loadedPlace, setLoaddedPlace] = useState<IPlace | null>(null);\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    reducerFormStateInitVal.inputs,\r\n    true\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchPlace = async () => {\r\n      try {\r\n        const resData = await sendRequest(ENDPOINT_PLACES + \"/\" + placeId);\r\n        const place = resData.place;\r\n        setLoaddedPlace(place);\r\n\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: place.title,\r\n              isValid: true,\r\n            },\r\n            description: {\r\n              value: place.description,\r\n              isValid: true,\r\n            },\r\n          },\r\n          true\r\n        );\r\n      } catch (err) {}\r\n    };\r\n\r\n    fetchPlace();\r\n  }, [sendRequest, placeId, setFormData]);\r\n\r\n  if (!loadedPlace && !error) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>Could not find the place!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const submitHandler = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    const place = {\r\n      ...(loadedPlace as IPlace),\r\n      title: formState.inputs.title!.value,\r\n      description: formState.inputs.description!.value,\r\n    };\r\n    try {\r\n      await sendRequest(\r\n        ENDPOINT_PLACES + \"/\" + placeId,\r\n        \"PATCH\",\r\n        JSON.stringify(place),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Barer \" + user?.token,\r\n        }\r\n      );\r\n      nav(\"/\" + user!.id + \"/places\");\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner asOverlay />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedPlace && (\r\n        <form className=\"place-form\" onSubmit={submitHandler}>\r\n          <Input\r\n            id=\"title\"\r\n            element=\"input\"\r\n            type=\"text\"\r\n            label=\"Title\"\r\n            validators={[EValidatorType.REQUIRE]}\r\n            errorText={ERROR_TEXT_REQUIRED}\r\n            onInput={inputHandler}\r\n            initValue={\r\n              (formState.inputs.title as reducerInputState).value as string\r\n            }\r\n            initialIsValid={\r\n              (formState.inputs.title as reducerInputState).isValid\r\n            }\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            element=\"textArea\"\r\n            label=\"Description\"\r\n            validators={[EValidatorType.MINLENGTH]}\r\n            errorText={ERROR_DESCRIPTION_LENGTH}\r\n            onInput={inputHandler}\r\n            initValue={\r\n              (formState.inputs.description as reducerInputState)\r\n                .value as string\r\n            }\r\n            initialIsValid={\r\n              (formState.inputs.description as reducerInputState).isValid\r\n            }\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            UPDATE PLACE\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default UpdatePlace;\r\n","import { ChangeEvent, useEffect, useReducer } from \"react\";\r\nimport { inputReducer } from \"../../../../hooks/useReducer\";\r\nimport { EReducerActionType, EValidatorType } from \"../../../../typing/enums\";\r\nimport { reducerInputState } from \"../../../../typing/types\";\r\n\r\nimport \"./Input.css\";\r\n\r\nexport function Input({\r\n  id,\r\n  label,\r\n  element,\r\n  type,\r\n  placeHolder,\r\n  rows,\r\n  validators,\r\n  errorText,\r\n  onInput,\r\n  initValue,\r\n  initialIsValid,\r\n}: {\r\n  id?: string;\r\n  label?: string;\r\n  element?: string;\r\n  type?: string;\r\n  placeHolder?: string;\r\n  rows?: number;\r\n  validators: EValidatorType[];\r\n  errorText: string;\r\n  onInput: Function;\r\n  initValue?: string;\r\n  initialIsValid?: boolean;\r\n}) {\r\n  const reducerInputStateInitVal: reducerInputState = {\r\n    value: initValue || \"\",\r\n    isTouched: false,\r\n    isValid: initialIsValid || false,\r\n  };\r\n  const [inputState, dispatch] = useReducer(\r\n    inputReducer,\r\n    reducerInputStateInitVal\r\n  );\r\n\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid);\r\n  }, [id, value, isValid, onInput]);\r\n\r\n  const changeHandler = (\r\n    event: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>\r\n  ) => {\r\n    const action = {\r\n      val: event.target.value,\r\n      type: EReducerActionType.CHNAGE,\r\n      validators: validators,\r\n    };\r\n    dispatch(action);\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    const action = {\r\n      val: inputState.value,\r\n      type: EReducerActionType.TOUCH,\r\n      validators: validators,\r\n    };\r\n\r\n    dispatch(action);\r\n  };\r\n\r\n  const currElement =\r\n    element === \"input\" ? (\r\n      <input\r\n        id={id}\r\n        type={type}\r\n        placeholder={placeHolder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value as string}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={id}\r\n        rows={rows || 3}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value as string}\r\n      />\r\n    );\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\r\n      }`}\r\n    >\r\n      <label htmlFor={id}>{label}</label>\r\n      {currElement}\r\n      {!inputState.isValid && inputState.isTouched && <p>{errorText}</p>}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\n\nimport \"./Card.css\";\n\nconst Card = ({\n  className,\n  style,\n  children,\n}: {\n  className?: String;\n  style?: React.CSSProperties;\n  children: JSX.Element | JSX.Element[];\n}) => {\n  return (\n    <div className={`card ${className}`} style={style}>\n      {children}\n    </div>\n  );\n};\n\nexport default Card;\n","import { useReducer, useCallback } from \"react\";\r\nimport { EReducerActionType } from \"../typing/enums\";\r\nimport { reducerFormAction, reducerFormState } from \"../typing/types\";\r\nimport { formReducer } from \"./useReducer\";\r\n\r\nexport const useForm = (\r\n  initialInputs: reducerFormState[\"inputs\"],\r\n  initialIsValid: reducerFormState[\"isValid\"]\r\n): [\r\n  reducerFormState,\r\n  (id: string, value: string, isValid: boolean) => void,\r\n  (\r\n    formInputs: reducerFormState[\"inputs\"],\r\n    formIsValid: reducerFormState[\"isValid\"]\r\n  ) => void\r\n] => {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialIsValid,\r\n  });\r\n\r\n  const inputHandler = useCallback(\r\n    (id: string, value: string, isValid: boolean) => {\r\n      const action: reducerFormAction = {\r\n        type: EReducerActionType.CHNAGE,\r\n        input: {\r\n          value: value,\r\n          isValid: isValid,\r\n        },\r\n        inputId: id,\r\n      };\r\n      dispatch(action);\r\n    },\r\n    []\r\n  );\r\n\r\n  const setFormData = useCallback(\r\n    (\r\n      formInputs: reducerFormState[\"inputs\"],\r\n      formIsValid: reducerFormState[\"isValid\"]\r\n    ) => {\r\n      const inputs = { inputs: formInputs, isValid: formIsValid };\r\n      const action: reducerFormAction = {\r\n        type: EReducerActionType.SET,\r\n        input: inputs,\r\n      };\r\n      dispatch(action);\r\n    },\r\n    []\r\n  );\r\n\r\n  return [formState, inputHandler, setFormData];\r\n};\r\n","import { EValidatorType } from \"../typing/enums\";\r\nimport { MINLENGTH, MAXLENGTH, MIN, MAX } from \"./Constants\";\r\n\r\nexport const VALIDATE = (\r\n  value: string | number | File,\r\n  validators: EValidatorType[]\r\n) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator === EValidatorType.REQUIRE) {\r\n      value = value as string;\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator === EValidatorType.MINLENGTH) {\r\n      value = value as string;\r\n      isValid = isValid && value.trim().length >= MINLENGTH;\r\n    }\r\n    if (validator === EValidatorType.MAXLENGTH) {\r\n      value = value as string;\r\n      isValid = isValid && value.trim().length <= MAXLENGTH;\r\n    }\r\n    if (validator === EValidatorType.MIN) {\r\n      isValid = isValid && +value >= MIN;\r\n    }\r\n    if (validator === EValidatorType.MAX) {\r\n      isValid = isValid && +value <= MAX;\r\n    }\r\n    if (validator === EValidatorType.EMAIL) {\r\n      value = value as string;\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n    if (validator === EValidatorType.FILE) {\r\n      value = value as File;\r\n      isValid = isValid && !!value.name.match(/\\.(jpg|jpeg|png|gif)$/);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { EReducerActionType, EValidatorType } from \"../typing/enums\";\r\nimport {\r\n  reducerInputAction,\r\n  reducerFormState,\r\n  reducerInputState,\r\n  reducerFormAction,\r\n} from \"../typing/types\";\r\nimport { VALIDATE } from \"../util/validators\";\r\n\r\n/* ************************************************************************************************** */\r\n\r\nexport const reducerInputStateInitVal: reducerInputState = {\r\n  value: \"\",\r\n  isTouched: false,\r\n  isValid: false,\r\n};\r\n\r\nexport const inputReducer = (\r\n  state: reducerInputState,\r\n  action: reducerInputAction\r\n) => {\r\n  switch (action.type) {\r\n    case EReducerActionType.CHNAGE: {\r\n      let newVal = action.val;\r\n      return {\r\n        ...state,\r\n        value: newVal,\r\n        isValid: VALIDATE(newVal, action.validators as EValidatorType[]),\r\n      };\r\n    }\r\n    case EReducerActionType.TOUCH: {\r\n      return { ...state, isTouched: true };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\n/* ************************************************************************************************** */\r\n\r\nexport const reducerFormStateInitVal: reducerFormState = {\r\n  inputs: {\r\n    title: reducerInputStateInitVal,\r\n    description: reducerInputStateInitVal,\r\n    address: reducerInputStateInitVal,\r\n    image: reducerInputStateInitVal,\r\n  },\r\n  isValid: false,\r\n};\r\n\r\nexport const formReducer = (\r\n  state: reducerFormState,\r\n  action: reducerFormAction\r\n) => {\r\n  switch (action.type) {\r\n    case EReducerActionType.CHNAGE: {\r\n      action.input = action.input as reducerInputState;\r\n      let formIsVlaid = true;\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsVlaid = formIsVlaid && action.input.isValid;\r\n        } else {\r\n          formIsVlaid =\r\n            formIsVlaid && (state.inputs[inputId] as reducerInputState).isValid;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId as string]: {\r\n            value: action.input.value,\r\n            isValid: action.input.isValid,\r\n          },\r\n        },\r\n        isValid: formIsVlaid,\r\n      };\r\n    }\r\n    case EReducerActionType.SET: {\r\n      action.input = action.input as reducerFormState;\r\n      return { inputs: action.input.inputs, isValid: action.input.isValid };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","export enum EValidatorType {\r\n  REQUIRE,\r\n  MINLENGTH,\r\n  MAXLENGTH,\r\n  MIN,\r\n  MAX,\r\n  EMAIL,\r\n  FILE,\r\n}\r\n\r\nexport enum EReducerActionType {\r\n  CHNAGE,\r\n  TOUCH,\r\n  SET,\r\n}\r\n\r\nexport enum HTTP_RESPONSE_STATUS {\r\n  OK = 200,\r\n  Created = 201,\r\n  Accepted = 202,\r\n  No_Content = 204,\r\n  Bad_Request = 400,\r\n  Unauthorized = 401,\r\n  Not_Found = 404,\r\n  Internal_Server_Error = 500,\r\n  Unprocessable_Entity = 422,\r\n}\r\n"],"names":["user","useContext","AuthContext","placeId","useParams","nav","useNavigate","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedPlace","setLoaddedPlace","useForm","reducerFormStateInitVal","formState","inputHandler","setFormData","useEffect","fetchPlace","ENDPOINT_PLACES","resData","place","title","value","isValid","description","className","submitHandler","event","preventDefault","inputs","JSON","stringify","Authorization","token","id","onClear","asOverlay","onSubmit","I","element","type","label","validators","EValidatorType","errorText","ERROR_TEXT_REQUIRED","onInput","initValue","initialIsValid","ERROR_DESCRIPTION_LENGTH","disabled","Input","placeHolder","rows","reducerInputStateInitVal","isTouched","useReducer","inputReducer","inputState","dispatch","changeHandler","action","val","target","EReducerActionType","touchHandler","currElement","placeholder","onChange","onBlur","htmlFor","style","children","initialInputs","formReducer","useCallback","input","inputId","formInputs","formIsValid","VALIDATE","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","validator","trim","MINLENGTH","MAXLENGTH","MIN","MAX","test","name","match","state","newVal","address","image","formIsVlaid","HTTP_RESPONSE_STATUS"],"sourceRoot":""}